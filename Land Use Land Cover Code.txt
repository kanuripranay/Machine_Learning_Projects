var precipitation = ee.Image("OpenLandMap/CLM/CLM_PRECIPITATION_SM2RAIN_M/v01"),
    lst = ee.Image("OpenLandMap/CLM/CLM_LST_MOD11A2-DAY_M/v01"),
    pop = ee.ImageCollection("WorldPop/GP/100m/pop"),
    nasadem = ee.Image("NASA/NASADEM_HGT/001"),
    geometry = 
    /* color: #ff0000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[67.97336201407037, 36.906268202567645],
          [67.97336201407037, 7.961674511583078],
          [97.15304951407037, 7.961674511583078],
          [97.15304951407037, 36.906268202567645]]], null, false);

// Precipitation data
var rain = precipitation.reduce(ee.Reducer.sum()).rename('rain');
Map.addLayer(rain, { max: 0, min: 4000, palette: ['purple', 'blue', 'cyan', 'green', 'yellow', 'red']}, 'Rain', false);

// LST as label data
lst = lst.reduce(ee.Reducer.mean()).multiply(0.02).add(-273.15).rename('LST');
Map.addLayer(lst, { min: 0, max: 50, palette: ['purple', 'blue', 'cyan', 'green', 'yellow', 'red']}, 'LST');

// Population data
pop = pop.filterBounds(geometry).sort('system:time_start', false).first().rename('pop');
Map.addLayer(pop, { min: 0, max: 100, palette: ['black', 'red', 'white']}, 'Population', false);

// Elevation data
var elevation = nasadem.select('elevation');
Map.addLayer(elevation, { min: 0, max: 3000, palette: ['green', 'yellow', 'red', 'white']}, 'Elevation', false);

// Add every image as one
var combined = ee.Image([rain, lst, pop, elevation]).updateMask(pop);

// Sample the data
var sample = combined.sample({
  numPixels: 10000,
  region : geometry,
  scale: 100,
  geometries: true
}).randomColumn();
Map.addLayer(sample, {}, 'Sample', false);

// Split into train and test
var train = sample.filter(ee.Filter.lte('random', 0.8));
var test = sample.filter(ee.Filter.gt('random', 0.8));
print('Train size', train.size(), 'Test size', test.size());

// Do random forest regression
var regression = ee.Classifier.smileRandomForest(50).train(train, 'LST', ['rain', 'elevation', 'pop'])
  .setOutputMode('REGRESSION');
print('Regression RF', regression.explain());

// Make prediction
var predictionLST = combined.classify(regression, 'LST_Prediction');
Map.addLayer(predictionLST, { min: 0, max: 50, palette: ['purple', 'blue', 'cyan', 'green', 'yellow', 'red']}, 'LST Prediction');

// Classify the test data for accuracy test
var testData = test.classify(regression, 'LST_Prediction').map(function(data){
  return data.set('line', data.get('LST'));
});

// Show accuracy in chart
var chart = ui.Chart.feature.byFeature(testData, 'LST', ['line', 'LST_Prediction'])
  .setChartType('ScatterChart')
  .setOptions({
    dataOpacity: 0.3,
    title: 'LST Actual vs Prediction',
    hAxis: {
      title: 'LST Actual'
    },
    vAxis: {
      title: 'LST Prediction'
    },
    series: {
      0: {
        pointSize : 0,
        pointsVisible: false,
        visibleInLegend: false
      },
      1: {
        color: 'blue'
      }
    },
    trendlines: {
      0: {
        opacity: 1,
        type: 'linear',
        color: 'red',
        visibleInLegend: false
      },
      1: {
        opacity: 0.3,
        type: 'linear',
        showR2: true,
        color: 'blue',
        visibleInLegend: true
      }
    }
  });
print(chart);



https://code.earthengine.google.com/?scriptPath=users%2Fkanuripranay%2FLULC_Classification%3AProject_3